#!/bin/bash
path=~/.radio
#path=~/programs/own/radio
dbname='radio.db'
db="${path}/$dbname"
sqlitename='sqlite3'
sqlite="${path}/$sqlitename"

function die() {
	echo -e "\\n$1\\n"
	exit 1
}

function isnumerical() {
	[[ "$1" =~ ^[[:digit:]]+$ ]] && return 0
	return 1
}

function printStations() {
	outtext="$("$sqlite" "$db" "$1")"
	[[ "$outtext" == "" ]] && die "no stations found! :("
	echo "Multiple possible stations. Please specify!"
	echo -e "ID \t Name"
	echo "-------------------------------------------"
	echo -e "${outtext//|/\\t}"
}

function addinteractive() {
	echo "Interactive Mode for adding a station"
	echo
	echo -n "Station name: "
	read name
	echo -n "Streaming URL: "
	read url1
	echo -n "(Optional) Backup-Streaming URL (Just press enter to skip): "
	read url2
	echo -n "Location of the station: "
	read loc
	echo -n "Tags for the station (e.g.: 80s, news, chillout): "
	read tags
	
	#restart script with the parameters
	bash "$0" "-a" "$name" "$url1" "$url2" "$loc" "$tags" && exit 0
	
}

function backuphistory() {
	[[ ! -f "${path}/backup_commands" ]] && cd "$path" && wget -q https://raw.githubusercontent.com/todestoast/radio/master/backup_commands
	"$sqlite" "$db" < "${path}/backup_commands"
}

function restorehistory() {
	[[ ! -f "${path}/restore_commands" ]] && cd "$path" && wget -q https://raw.githubusercontent.com/todestoast/radio/master/restore_commands
	"$sqlite" "$db" < "${path}/restore_commands"
}

function updateDB() {
	md5date=$(date +%s -r "${path}/db.md5")
	datediff=$((today-md5date))
	if [ $datediff -gt 86471 ]; then
		#file is older than 1 day
		echo "checking for new stations..."
		echo
		cd /tmp/ || die "can't cd to /tmp"
		wget -q https://raw.githubusercontent.com/todestoast/radio/master/db.md5
		if ! cmp -s /tmp/db.md5 "${path}/db.md5" ; then
			#different sum, download db
			echo "new stations found. downloading..."
			cd "$path" || die "can't cd to $path"
			backuphistory
			rm radio.db
			wget -q https://github.com/todestoast/radio/raw/master/radio.db
			restorehistory
			rm backup.csv
			echo "new stations added"
		fi
		mv /tmp/db.md5 "${path}/db.md5"
	fi
}
dumptime=0

if [[ "$1" == "-x" ]]; then
	[ -z "$2" ] && die "please pass proxy URL after argument -x"
	proxy="$2"
	set -- "$3" "$4" "$5" #read: set params 3 - 5 as params 1 - 3
fi

if [[ "$1" == "-d" || "$1" == "--dump" ]]; then
	[ -z "$2" ] && die "please pass name or id of station you want to dump"
	[ -z "$3" ] && die "please pass duration of dump in minutes (see --help for more infos)"
	[ -n "$3" ] && isnumerical "$3" && dumptime=$3
	set -- "$2" #read: set param 2 as params 1
fi

add_station='insert into stations values('
add_station+="'$2'"
add_station+=','
add_station+="'$3'"
add_station+=','
add_station+="'$4'"
add_station+=','
add_station+="'$5'"
add_station+=','
add_station+="'$6'"
add_station+=')'

get_url='select url from stations where name like "%'
get_url+="$1"
get_url+='%"'

get_url_only='select url from stations where name like "%'
get_url_only+="$2"
get_url_only+='%"'

get_url_only_for_id='select url from stations where rowid='
get_url_only_for_id+=$2

get_url2_only_for_id='select url2 from stations where rowid='
get_url2_only_for_id+=$3

get_url_for_id='select url from stations where rowid='
get_url_for_id+=$1

get_url2_for_id='select url2 from stations where rowid='
get_url2_for_id+=$2

get_url2='select url2 from stations where name like "%'
get_url2+="$2"
get_url2+='%"'

get_url2_only='select url2 from stations where name like "%'
get_url2_only+="$3"
get_url2_only+='%"'

get_names_with_id='select ROWID, name from stations where name like "%'
get_names_with_id+="$1"
get_names_with_id+='%"'

get_random='select url from stations order by random() limit 1'

get_random_except='select url from stations where name not like "%'
get_random_except+="$3"
get_random_except+='%"'
get_random_except+='order by random() limit 1'

get_random_for_tag='select url from stations where tags like "%'
get_random_for_tag+="$2"
get_random_for_tag+='%"'
get_random_for_tag+='order by random() limit 1'

get_random_for_loc='select url from stations where location like "%'
get_random_for_loc+="$2"
get_random_for_loc+='%"'
get_random_for_loc+='order by random() limit 1'

get_stations_for_loc='select name from stations where location like "%'
get_stations_for_loc+="$2"
get_stations_for_loc+='%"'

get_stations='select ROWID, name from stations'

get_tag='select ROWID, name from stations where tags like "%'
get_tag+="$2"
get_tag+='%"'

get_recently_played='select name from history order by rowid desc limit 9'
get_most_played='select name from history group by name order by sum(playtime) desc limit 9'

get_all_location='select distinct location from stations'

today=$(date +%s)

[[ ! -d "$path" ]] && die "path $path does not exist"

if [[ ! -f "${path}/db.md5" ]]; then
	echo "Missing file. Downloading..."
	cd "$path" || die "can't cd to $path"
	wget -q https://raw.githubusercontent.com/todestoast/radio/master/db.md5
	[ -f "${path}/radio.db" ] || wget -q https://github.com/todestoast/radio/raw/master/radio.db
fi

updateDB

[ -z "$1" ] && die "see --help for usage"

#if the first parameter is a number
 isnumerical "$1" && url="$("$sqlite" "$db" "$get_url_for_id")"

case $1 in
	random)
		url=$("$sqlite" "$db" "$get_random")
		if [[ "$2" == "-X" ]]; then
			[ -z "$3" ] && die "Pass a word you want to search for"
			url=$("$sqlite" "$db" "$get_random_except")	
		fi
		;;
	-a|--add)
		[ -z "$2" ] && addinteractive
		[[ -n "$6" && "$2" != "" && "$3" != "" ]] && echo "adding station..." && "$sqlite" "$db" "$add_station" && exit 0
		die "Error adding Station. Maybe you didn't provide a needed parameter. \nFor more information see --help"
		;;
	-la|--list-all)
		printStations "$get_stations"
		exit 0
		;;
	-l|--list)
		[ -z "$2" ] && die "Pass a word you want to search for"

		if [[ "$3" == "random" ]]; then
				url="$("$sqlite" "$db" "$get_random_for_tag")"
		else
				printStations "$get_tag"
				exit 0
		fi
		;;
	-lr|--list-regions)
		exec "$sqlite" "$db" "$get_all_location"
		;;
	-rp|--recently-played)
		exec "$sqlite" "$db" "$get_recently_played"
		;;
	-r|--region)
		[ -z "$2" ] && die "Pass a region you want to search for"

		if [[ "$3" == "random" ]]; then
			url="$("$sqlite" "$db" "$get_random_for_loc")"
		else
			exec "$sqlite" "$db" "$get_stations_for_loc"
		fi
	;;
	-b|--backup)
		[[ "$2" == "-p" || "$2" == "--print" ]] && exec "$0" -p -b "$3"

		if isnumerical "$1"; then
 	 		url="$("$sqlite" "$db" "$get_url2_for_id")"
 		else
			url="$("$sqlite" "$db" "$get_url2")"
		fi
	;;
	-mp|--most-played)
		exec "$sqlite" "$db" "$get_most_played"
	;;
	-u|--update)
		location="$(which "$0")"
		[[ "$location" == "" ]] && die "Location of Script could not be identified, please include it in your PATH variable"
		echo "Updating radio Script at $location... "
		echo
		cd /tmp/ || die "can't cd to /tmp"
		wget -q https://raw.githubusercontent.com/todestoast/radio/master/radio
		mv radio "$location" 2> /dev/null || {
			echo  "Unable to move updated version of the script to $location. Retrying with sudo..."
			echo
			sudo mv radio "$location" || die "Unable to move updated version of the script to $location. You can find it at /tmp/radio"
			sudo chmod a+x "$location"
		}
		echo "Script sucessfully updated"
		exit 0
	;;
		#make -p also work with the ID and the backup stream
	-p|--print)
		if isnumerical "$2"; then
			url="$("$sqlite" "$db" "$get_url_only_for_id")"
		elif [[ "$2" == "-b" || "$2" == "--backup" ]];then
			if isnumerical "$3"; then
				url="$("$sqlite" "$db" "$get_url2_only_for_id")"
			else
				url="$("$sqlite" "$db" "$get_url2_only")"
			fi
		else
			url="$("$sqlite" "$db" "$get_url_only")"
		fi
		#if no url was found
		if [ ${#url}  -eq 0 ]; then
			[[ "$2" == "-b" || "$2" == "--backup" ]] && die "No Backup URL for $3 found"
			die "No URL for $2 found"
		fi
		echo "$url"
		exit 0
	;;
	-h|--help)
		echo "usage: radio <stationname>"
		echo "example: radio kexp"
		echo "Or use the unique ID of every station: radio <ID>"
		echo "To get the ID for example search for a tag."
		echo ""
		echo "To play a random station: radio random"
		echo "If you want to exclude stations with 'word' in their name from random:"
		echo "radio random -X word"
		echo
		echo "-a --add"
		echo "add a station to local database. If called without any other parameter an interactive dialog guides you through the process of adding a station"
		echo "For not using the interactive version provide the following parameters (in this exact order): "
		echo
		echo "name (must not be empty)"
		echo "Stream URL (must not be empty)"
		echo "Backup-Stream URL"
		echo "Location of the station"
		echo "Tags"
		echo 
		echo "To prevent any issues with special characters I strongly recommend to quote every parameter (see example)"
		echo 'To leave a parameter empty just use ""'
		echo
		echo 'example: radio -a "Radio Station 2000" "http://streamingurl:8000" "" "Location" "club, dance, techno"'
		echo "in this example the value for the Backup-Stream URL is left empty"
		echo
		echo "-b --backup"
		echo "play backup stream (if exists). Might help if the primary streaming URL is not working"
		echo
		echo "-d --dump"
		echo "dump radop stream instead of playing. pass id or word as usual + duration of dump."
		echo "example: radio -d 25 30 dumps the stream of the station with id 25 for 30 minutes"
		echo "the dump can be found at ./stream.dump"
		echo
		echo "-h --help"
		echo "displays this help menu"
		echo
		echo "-l --list <search>"
		echo "search radiostations for specific word. This doesn't search for a stationname but for a tag."
		echo "example: radio -l ambient"
		echo "use 'radio -l <search> random' to randomly play a station that matches the search"
		echo "example: radio -l ambient random"
		echo
		echo "-la --list-all"
		echo "list all station Names (Caution: There might be a lot!)"
		echo
		echo "-lr --list-regions"
		echo "list all regions for radio stations"
		echo
		echo "-mp --most-played"
		echo "lists the top 10 most played radio stations measured by duration of playing (most played first)"
		echo
		echo "-p --print"
		echo "prints the URL of a station. Can be used with names or IDs"
		echo "example: radio -p 5"
		echo "to print the backup stream use radio -p -b"
		echo
		echo "-r --region"
		echo "list all radio stations for specific region"
		echo "example: radio -r beirut"
		echo "use 'radio -r <search> random' to randomly play a station for that region"
		echo "example: radio -r seattle random"
		echo
		echo "-rp --recently-played"
		echo "list 10 last played stations (newest first)"
		echo
		echo "-u --update"
		echo "updates the script itself. Caution: Every changes you might have done to the script yourself will be lost!"
		echo
		echo "-x"
		echo "use proxy for playing/dumping streams. Pass proxy in following format http_proxy://url:port"
		echo "proxy should be first argument in all cases"
		echo "example: radio -x http_proxy://proxy:8080 random"
		echo
		exit 0
		;;
esac

[ ${#url}  -eq 0 ] && url="$("$sqlite" "$db" "$get_url")"

#if no url was found
if [ ${#url}  -eq 0 ]; then
	[[ "$1" == "-b" || "$1" == "--backup" ]] && die "No backup stream found :("
       die "No station for $1 found :("
fi

#if string contains newlines therefore multiple urls
if [ "$( wc -l <<<"$url" )" -gt 1 ]; then
	#select names
	printStations "$get_names_with_id"
	exit 1;
fi

get_name_for_url='select name from stations where url="'
get_name_for_url+="$url"
get_name_for_url+='"'
name="$("$sqlite" "$db" "$get_name_for_url")"
echo "Playing $name"
echo


[ -z "$proxy" ] || url="${proxy}/$url"
if [[ $dumptime > 0 ]]; then
	mplayer -dumpstream "$url" & 
	sleep "$dumptime"m
	killall mplayer
else
	mplayer -quiet "$url" 2>&1 | sed -nu "s/^ICY.*StreamTitle='\([^;]*\)';.*/\1/p"
fi

end=$(date +%s)
playtime=$(((end-today)/60))
set_history='insert into history values('
set_history+="'$name'"
set_history+=','
set_history+=$playtime
set_history+=')'
[[ "$name" != "" && "$playtime" != "" ]] &&  "$sqlite" "$db" "$set_history"

exit 0
